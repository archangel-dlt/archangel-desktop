buildscript {
    ext.kotlin_version = '1.3.11'
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
    id 'application'
}

group 'archangeldlt'
version '1.2'

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
def embeddedJRE = true

repositories {
    mavenCentral()
    jcenter()
}

def javaFxPlatform() {
    def currentOS = org.gradle.internal.os.OperatingSystem.current()
    if (currentOS.isWindows())
        return 'win'
    if (currentOS.isLinux())
        return 'linux'
    if (currentOS.isMacOsX())
        return 'mac'
}
def platform = javaFxPlatform()

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'org.jetbrains.kotlin:kotlin-reflect'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'
    compile group: 'org.web3j', name: 'core', version: '4.0.4'
    compile 'no.tornado:tornadofx:1.7.17'
    compile "org.openjfx:javafx-base:11:${platform}"
    compile "org.openjfx:javafx-graphics:11:${platform}"
    compile "org.openjfx:javafx-controls:11:${platform}"
    compile 'org.apache.ant:ant-compress:1.5'
    compile 'uk.gov.nationalarchives:droid:6.4'
    compile('uk.gov.nationalarchives:droid-command-line:6.4'){
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'bouncycastle'
    }
    compile 'org.slf4j:slf4j-log4j12:1.7.25'
    compile 'khttp:khttp:0.1.0'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'archangeldlt.ArchangelDLTKt',
                'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
        )
    }

    mainClassName = 'archangeldlt.ArchangelDLTKt'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task copyDependencies(type: Copy) {
    destinationDir libsDir
    from configurations.runtime
}

task javapackager(type: Exec, dependsOn: [assemble, copyDependencies]) {
    def nativeType
    if (platform == 'win')
        nativeType = 'msi'
    if (platform == 'mac')
        nativeType = 'pkg'
    if (platform == 'linux')
        nativeType = 'deb'

    def dependencies = []
    configurations.runtime.forEach({ file ->
        dependencies.add('-srcfiles')
        dependencies.add(file.getName())
    })

    def paramEmbeddedJRE = embeddedJRE ? [] : ['-Bruntime=']

    workingDir project.projectDir
    commandLine = [
            'javapackager',
            '-deploy',
            '-nosign',
            '-native', nativeType,
            '-outdir', "${buildDir}/distribution",
            '-outfile', project.name,
            '-name', 'ArchangelDesktop',
            '-appclass', mainClassName,
            '-srcdir', libsDir,
            '-srcfiles', jar.archiveName
    ] + dependencies + paramEmbeddedJRE
}

defaultTasks 'installDist'
